name: pipeline

on: [push, pull_request]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  cmake-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install cmake-format
        run: pip install cmakelang

      - name: Check CMake formatting
        run: |
          FILES=$(find . -name 'CMakeLists.txt' -o -name '*.cmake')
          echo "Checking format for: $FILES"

          fail=0
          for file in $FILES; do
            if ! diff -u "$file" <(cmake-format "$file"); then
              echo "::error file=$file::File is not properly formatted"
              fail=1
            fi
          done
          exit $fail

  whitespace:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check trailing whitespace
        run: |
          # Exclut binaires, repo, build, submodules, artifacts courants, images, archivesâ€¦
          if grep -rI --line-number --exclude-dir=.git --exclude-dir=build \
              --exclude-dir=.venv --exclude-dir=_deps --exclude-dir=Install \
              --exclude='*.png' --exclude='*.jpg' --exclude='*.jpeg' \
              --exclude='*.gif' --exclude='*.pdf' --exclude='*.zip' \
              --exclude='*.tar' --exclude='*.tar.*' --exclude='*.7z' \
              --exclude='*.bin' --exclude='*.exe' --exclude='*.dll' \
              --exclude='*.so' --exclude='*.a' --exclude='*.o' \
              -P '[ \t]+$' .; then
            echo "Trailing whitespace found"
            exit 1
          fi

      - name: Check final newline at EOF
        shell: bash
        run: |
          fail=0
          while IFS= read -r -d '' f; do
            case "$f" in
              *.png|*.jpg|*.jpeg|*.gif|*.pdf|*.zip|*.tar|*.tar.*|*.7z|*.bin|*.exe|*.dll|*.so|*.a|*.o) continue;;
            esac
            if [ -s "$f" ]; then
              if ! tail -c1 "$f" | od -An -t x1 | grep -q "0a"; then
                echo "::error file=$f::Missing final newline"
                fail=1
              fi
            fi
          done < <(find . -type f -not -path "./.git/*" -not -path "./build/*" -print0)
          exit $fail

      - name: Check for CRLF line endings
        run: |
          if git ls-files -z | xargs -0 grep -Il $'\r' | grep .; then
            echo "CRLF line endings detected (use LF)"
            exit 1
          fi

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Check formatting
        run: |
          FILES=$(find . -regex '.*\.\(cpp\|hpp\|c\|h\)' -not -path "./build/*")
          clang-format --dry-run --Werror $FILES

  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Run markdownlint
        run: markdownlint '**/*.md'

  build:
    needs: [clang-format, cmake-format, whitespace, markdownlint]
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure and Build
        run: |
          cmake -S . -B build \
            -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.8/bin/nvcc \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_TESTS=ON \
            -DENABLE_COVERAGE=ON \
            -DENABLE_SANITIZERS=OFF
          cmake --build build -- -j$(nproc)
        shell: bash

      - name: Save build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-folder
          path: build/

  clang-analyzer:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-folder
          path: build/

      - name: Prepare analyzer directory
        run: mkdir -p clang-analyzer

      - name: Run Clang Static Analyzer
        run: |
          scan-build --status-bugs -o clang-analyzer cmake --build build
        shell: bash

      - name: Upload analyzer report
        uses: actions/upload-artifact@v4
        with:
          name: clang-analyzer-report
          path: clang-analyzer
          if-no-files-found: ignore

  test-and-coverage:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-folder
          path: build/

      - name: Setup Python venv and install gcovr
        run: |
          python3 -m venv gcovr-venv
          source gcovr-venv/bin/activate
          pip install gcovr
        shell: bash

      - name: Restore execute permission on test binaries
        working-directory: build
        run: chmod +x all_tests || true

      - name: Run tests and generate JUnit XML
        run: |
          ctest --test-dir build --output-on-failure -T Test --no-compress-output
          cp build/Testing/*/Test.xml build/junit.xml

      - name: Generate coverage report using gcovr in venv
        working-directory: build
        run: |
          ROOTDIR="$(cd .. && pwd)"
          ../gcovr-venv/bin/gcovr --root "$ROOTDIR" \
            --filter "$ROOTDIR/src" \
            --exclude '^build/.*' \
            --exclude '^build/_deps/.*' \
            --exclude '^tests/.*' \
            --exclude '^external/.*' \
            --exclude '^usr/.*' \
            --exclude '^Install/.*' \
            --html --html-details -o coverage.html

          ../gcovr-venv/bin/gcovr --root "$ROOTDIR" \
            --filter "$ROOTDIR/src" \
            --exclude '^build/.*' \
            --exclude '^build/_deps/.*' \
            --exclude '^tests/.*' \
            --exclude '^external/.*' \
            --exclude '^usr/.*' \
            --exclude '^Install/.*' \
            --txt > coverage.txt

          ../gcovr-venv/bin/gcovr --root "$ROOTDIR" \
            --filter "$ROOTDIR/src" \
            --exclude '^build/.*' \
            --exclude '^build/_deps/.*' \
            --exclude '^tests/.*' \
            --exclude '^external/.*' \
            --exclude '^usr/.*' \
            --exclude '^Install/.*' \
            --lcov -o coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: build/coverage.lcov
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-coverage
          verbose: true

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage.html

      - name: Upload coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          path: build/coverage.txt
