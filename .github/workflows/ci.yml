name: Build and Test CI

on: [push, pull_request]

permissions:
  contents: read

jobs:
  cmake-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install cmake-format
        run: pip install cmakelang

      - name: Check CMake formatting
        run: |
          FILES=$(find . -name 'CMakeLists.txt' -o -name '*.cmake')
          echo "Checking format for: $FILES"

          fail=0
          for file in $FILES; do
            if ! diff -u "$file" <(cmake-format "$file"); then
              echo "::error file=$file::File is not properly formatted"
              fail=1
            fi
          done
          exit $fail

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Check formatting
        run: |
          FILES=$(find . -regex '.*\.\(cpp\|hpp\|c\|h\)' -not -path "./build/*")
          clang-format --dry-run --Werror $FILES

  build:
    needs: [clang-format, cmake-format]
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure and Build
        run: |
          cmake -S . -B build \
            -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.8/bin/nvcc \
            -DBUILD_TESTS=ON \
            -DENABLE_COVERAGE=ON \
            -DENABLE_SANITIZERS=OFF \
            -DCMAKE_CXX_FLAGS="--coverage" \
            -DCMAKE_C_FLAGS="--coverage" \
            -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
            -DCMAKE_PREFIX_PATH="$HOME/Install/protobuf-install;$HOME/Install/grpc;$HOME/Install/libtorch;/usr/local/cuda"
          cmake --build build
        shell: bash

      - name: Save build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-folder
          path: build/

  test-and-coverage:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-folder
          path: build/

      - name: Run tests
        working-directory: build
        run: ctest --output-on-failure

      - name: Install gcovr
        run: pip install gcovr

      - name: Generate coverage report (HTML)
        working-directory: build
        run: |
          gcovr --root .. --html --html-details -o coverage.html
          gcovr --root .. --txt > coverage.txt

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            build/coverage.html
            build/coverage.txt
