name: pipeline

on: [push, pull_request]

permissions:
  contents: read

jobs:
  cmake-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cmake-format
        run: pip install cmakelang

      - name: Check CMake formatting
        run: |
          FILES=$(find . -name 'CMakeLists.txt' -o -name '*.cmake')
          echo "Checking format for: $FILES"

          fail=0
          for file in $FILES; do
            if ! diff -u "$file" <(cmake-format "$file"); then
              echo "::error file=$file::File is not properly formatted"
              fail=1
            fi
          done
          exit $fail

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Check formatting
        run: |
          FILES=$(find . -regex '.*\.\(cpp\|hpp\|c\|h\)' -not -path "./build/*")
          clang-format --dry-run --Werror $FILES

  build:
    needs: [clang-format, cmake-format]
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure and Build
        run: |
          cmake -S . -B build \
            -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.8/bin/nvcc \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_TESTS=ON \
            -DENABLE_COVERAGE=ON \
            -DENABLE_SANITIZERS=OFF
          cmake --build build -- -j$(nproc)
        shell: bash

      - name: Save build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-folder
          path: build/

  clang-analyzer:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-folder
          path: build/

      - name: Prepare analyzer directory
        run: mkdir -p clang-analyzer          

      - name: Run Clang Static Analyzer
        run: |
          scan-build --status-bugs -o clang-analyzer cmake --build build
        shell: bash

      - name: Upload analyzer report
        uses: actions/upload-artifact@v4
        with:
          name: clang-analyzer-report
          path: clang-analyzer
          if-no-files-found: ignore
          
  test-and-coverage:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-folder
          path: build/

      - name: Restore execute permission on test binaries
        working-directory: build
        run: |
          chmod +x unit_tests || true

      - name: Run tests and generate JUnit XML
        run: |
          ctest --test-dir build --output-on-failure -T Test --no-compress-output
          cp build/Testing/*/Test.xml build/junit.xml

      - name: Generate coverage report (HTML)
        working-directory: build
        run: |
          gcovr --root .. --html --html-details -o coverage.html
          gcovr --root .. --txt > coverage.txt
          gcovr --root .. --lcov -o coverage.lcov

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            build/coverage.html
            build/coverage.txt
            build/coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: build/coverage.lcov
          fail_ci_if_error: true

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
